System.register(["angular2/core"],function(t){var e,i,n=this&&this.__decorate||function(t,e,i,n){var o,s=arguments.length,a=3>s?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(a=(3>s?o(a):s>3?o(e,i,a):o(e,i))||a);return s>3&&a&&Object.defineProperty(e,i,a),a},o=this&&this.__metadata||function(t,e){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(t,e):void 0};return{setters:[function(t){e=t}],execute:function(){i=function(){function t(){this.canvas=document.getElementsByTagName("canvas")[0],this.context=this.canvas.getContext("2d"),this.initialize()}return t.prototype.redraw=function(){this.context.beginPath(),this.context.moveTo(0,5),this.context.lineTo(this.canvas.width/2+5,5),this.context.lineTo(this.canvas.width/2-5,15),this.context.lineTo(this.canvas.width,15),this.context.strokeStyle="#BD2809",this.context.lineWidth=10,this.context.lineJoin="miter",this.context.stroke()},t.prototype.resizeCanvas=function(){this.canvas.width=window.innerWidth,this.canvas.height=20,this.redraw()},t.prototype.initialize=function(){window.addEventListener("resize",this.resizeCanvas.bind(this),!1),this.resizeCanvas()},t=n([e.Injectable(),o("design:paramtypes",[])],t)}(),t("LightningService",i)}}});
//# sourceMappingURL=data:application/json;base64,
