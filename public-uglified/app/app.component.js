System.register(["angular2/core","angular2/common","angular2/router","./components/HomeComponent/home.component","./components/ServicesComponent/services.component","./components/RecommendComponent/recommend.component","./components/MissingPageComponent/missing.component","./services/LightningService/lightning.service","./directives/parallax/parallax.directive"],function(e){var n,t,o,c,i,s,r,p,a,m,l=this&&this.__decorate||function(e,n,t,o){var c,i=arguments.length,s=3>i?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(c=e[r])&&(s=(3>i?c(s):i>3?c(n,t,s):c(n,t))||s);return i>3&&s&&Object.defineProperty(n,t,s),s},f=this&&this.__metadata||function(e,n){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(e,n):void 0};return{setters:[function(e){n=e},function(e){t=e},function(e){o=e},function(e){c=e},function(e){i=e},function(e){s=e},function(e){r=e},function(e){p=e},function(e){a=e}],execute:function(){m=function(){function e(e){this.lightningService=e}return e.prototype.printStuff=function(e){console.log(e)},e.prototype.parallaxInit=function(e){console.log(e)},e=l([n.Component({selector:"app",providers:[o.ROUTER_PROVIDERS,p.LightningService]}),n.View({templateUrl:"./app/app.html",styleUrls:["./app/styles/app.styles.css","./app/styles/header.styles.css"],directives:[t.COMMON_DIRECTIVES,t.CORE_DIRECTIVES,o.ROUTER_DIRECTIVES,a.Parallax]}),o.RouteConfig([{path:"/",component:c.HomeComponent,as:"Home"},{path:"/services",component:i.ServicesComponent,as:"Services"},{path:"/recommendations",component:s.RecommendComponent,as:"Recommendations"},{path:"/404",component:r.MissingPageComponent,as:"Missing-Page",useAsDefault:!0}]),f("design:paramtypes",[p.LightningService])],e)}(),e("AppComponent",m)}}});
//# sourceMappingURL=data:application/json;base64,
