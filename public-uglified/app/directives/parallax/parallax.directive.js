System.register(["angular2/core"],function(t){var e,a,l=this&&this.__decorate||function(t,e,a,l){var s,i=arguments.length,n=3>i?e:null===l?l=Object.getOwnPropertyDescriptor(e,a):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,e,a,l);else for(var o=t.length-1;o>=0;o--)(s=t[o])&&(n=(3>i?s(n):i>3?s(e,a,n):s(e,a))||n);return i>3&&n&&Object.defineProperty(e,a,n),n},s=this&&this.__metadata||function(t,e){return"object"==typeof Reflect&&"function"==typeof Reflect.metadata?Reflect.metadata(t,e):void 0};return{setters:[function(t){e=t}],execute:function(){a=function(){function t(t){var e=this;this.name="parallaxDirective",this.cssKey="backgroundPosition",this.parallaxCss="backgroundPositionY",this.parallaxAxis="Y",this.parallaxRatio=-.7,this.parallaxInitVal=0,this.cssUnit="px",this.isSpecialVal=!1,this.evaluateScroll=function(){var t,a;a=e.scrollElement.scrollTop*e.parallaxRatio+e.parallaxInitVal,e.maxValue&&a>=e.maxValue?a=e.maxValue:e.minValue&&a<=e.minValue&&(a=e.minValue),t="backgroundPosition"===e.cssKey?"X"===e.parallaxAxis?a+e.cssUnit+" 0":"0 "+a+e.cssUnit:e.isSpecialVal?e.cssValue+"("+a+e.cssUnit+")":a+e.cssUnit,e.parallaxElement.style[e.cssKey]=t},this.hostElement=t.nativeElement}return t.prototype.ngOnInit=function(){var t;console.log("%s initialized on element",this.name,this.hostElement),console.log(this);for(var e in this.config)this[e]=this.config[e];if(this.parallaxCss=this.parallaxCss?this.parallaxCss:"backgroundPositionY",this.parallaxCss.match(/backgroundPosition/i)&&("X"===this.parallaxCss.split("backgroundPosition")[1].toUpperCase()&&(this.parallaxAxis="X"),this.parallaxCss="backgroundPosition"),t=this.parallaxCss.split(":"),this.cssKey=t[0],this.cssValue=t[1],this.isSpecialVal=this.cssValue?!0:!1,this.cssValue||(this.cssValue=this.cssKey),this.parallaxRatio=+this.parallaxRatio,this.parallaxInitVal=+this.parallaxInitVal,this.parallaxElement=this.parallaxElement||this.hostElement,!this.scrollElement)if(document.getElementById("parallaxScroll"))this.scrollElement=document.getElementById("parallaxScroll");else if(this.scrollerId)try{if(this.scrollElement=document.getElementById(this.scrollerId),!this.scrollElement)throw"The ID passed through the parallaxConfig ('"+this.scrollerId+"') object was not found in the document.  Defaulting to watch scrolling of the body."}catch(a){console.warn(a),this.scrollElement=document.getElementsByTagName("body")[0]}else this.scrollElement=document.getElementsByTagName("body")[0];this.evaluateScroll(),this.scrollElement.addEventListener("scroll",this.evaluateScroll)},l([e.Input(),s("design:type",Object)],t.prototype,"config",void 0),t=l([e.Directive({selector:"[parallax]"}),s("design:paramtypes",[e.ElementRef])],t)}(),t("Parallax",a)}}});
//# sourceMappingURL=data:application/json;base64,
